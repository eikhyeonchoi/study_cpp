1. for
문자열 비교
string 클래스라면 비교연산자를 사용해서 비교 가능
string 클래스가 아니라면 strcmp를 사용해서 비교



2. while
시간지연루프 #include <ctime>
clock(): 프로그램이 실행된 순간부터 이 함수가 호출된 순간까지 경과한 시스템시간을 리턴함
CLOCKS_PER_SEC: 초당 시스템 시간 단위 수를 알려줌(기호상수)
clock_t: clock()이 리턴하는 alias이름



3. do ~ while



4. range기반의 for loof(c++11)
배열의 모든항목을 참조하려할 때
int a[10] = {1,2,3,4,5};
for(int i: a) {        // 만약 값을 변경하려 하면 int &i로 선언해줘야함(참조변수)
    cout << i << endl; // i는 배열의 첫 번째 요소로 초기화됨
}



5. 루프와 텍스트 입력
기본적으로 엔터를 입력해야지 입력버퍼에 있는 입력값들이 전달됨

기본 cin
화이트스페이스(공백, 개행, 탭)를 무시해버림 즉 grab 하지 않는다

cin.get()
basic_istream& get(); // 입력버퍼에 있는 문자 딱 하나를 읽음 
basic_istream& get(char& c); // `문자 하나 읽을 때
basic_istream& get(char* s, streamsize n); // 한 줄 입력
basic_istream& get(char* s, streamsize n, char delim); // 한 줄 입력
char ch;
1) cin.get(ch);     // 문자 입력됬을 경우, istream객체 리턴하고 bool 형태로 변환하면 true임, EOF만나면 istream -> bool형 false
2) ch = cin.get();  // 문자 입력됬을 경우, int를 리턴함, EOF만나면 EOF리턴
차이점: 1번의 경우는 istream 객체를 리턴함, 2번의 경우는 해당 문자에 해당하는 int형의 코드를 리턴함
2번의 경우 데이터형과 관련된 문제가 발생할 수 있음 따라서 1번사용을 권장함 1번은 데이터형과 관련된 문제가 발생x


cin.getline(), getline() : 한 줄 입력받을 때 사용 
공통점: 개행문자를 무시하지 않는다 즉, grab함

1) std::istream::getline // cin.getline();
istream& getline(char *s, streamsize n);
istream& getline(char *s, streamsize n, char delim);

2) std::getline(string) // getline();
istream& getline(istream& is, string& str);
istream& getline(istream& is, string& str, char delim);

※ EOF검사 cin.fail();

※ 입력버퍼 지우기 
    cin.clear(), cin.ignore()

※ get()과 getline() 두 함수 모두 파라미터가 2개일 때 
    공통점: 한줄을 입력받을 때 사용할 수 있다
    차이점: get()은 개행문자를 무시하고 getline()은 개행문자를 잡는다



6. 중첩루프와 2차원배열

